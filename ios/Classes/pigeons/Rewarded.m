// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Rewarded.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface RewardedError ()
+ (RewardedError *)fromList:(NSArray *)list;
+ (nullable RewardedError *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface RewardedImpression ()
+ (RewardedImpression *)fromList:(NSArray *)list;
+ (nullable RewardedImpression *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface RewardedEvent ()
+ (RewardedEvent *)fromList:(NSArray *)list;
+ (nullable RewardedEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation RewardedError
+ (instancetype)makeWithCode:(NSNumber *)code
    description:(NSString *)description {
  RewardedError* pigeonResult = [[RewardedError alloc] init];
  pigeonResult.code = code;
  pigeonResult.description = description;
  return pigeonResult;
}
+ (RewardedError *)fromList:(NSArray *)list {
  RewardedError *pigeonResult = [[RewardedError alloc] init];
  pigeonResult.code = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.code != nil, @"");
  pigeonResult.description = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.description != nil, @"");
  return pigeonResult;
}
+ (nullable RewardedError *)nullableFromList:(NSArray *)list {
  return (list) ? [RewardedError fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.code ?: [NSNull null]),
    (self.description ?: [NSNull null]),
  ];
}
@end

@implementation RewardedImpression
+ (instancetype)makeWithData:(NSString *)data {
  RewardedImpression* pigeonResult = [[RewardedImpression alloc] init];
  pigeonResult.data = data;
  return pigeonResult;
}
+ (RewardedImpression *)fromList:(NSArray *)list {
  RewardedImpression *pigeonResult = [[RewardedImpression alloc] init];
  pigeonResult.data = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.data != nil, @"");
  return pigeonResult;
}
+ (nullable RewardedImpression *)nullableFromList:(NSArray *)list {
  return (list) ? [RewardedImpression fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.data ?: [NSNull null]),
  ];
}
@end

@implementation RewardedEvent
+ (instancetype)makeWithAmount:(NSNumber *)amount
    type:(NSString *)type {
  RewardedEvent* pigeonResult = [[RewardedEvent alloc] init];
  pigeonResult.amount = amount;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (RewardedEvent *)fromList:(NSArray *)list {
  RewardedEvent *pigeonResult = [[RewardedEvent alloc] init];
  pigeonResult.amount = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.amount != nil, @"");
  pigeonResult.type = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.type != nil, @"");
  return pigeonResult;
}
+ (nullable RewardedEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [RewardedEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.amount ?: [NSNull null]),
    (self.type ?: [NSNull null]),
  ];
}
@end

@interface YandexAdsRewardedCodecReader : FlutterStandardReader
@end
@implementation YandexAdsRewardedCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [RewardedError fromList:[self readValue]];
    case 129: 
      return [RewardedEvent fromList:[self readValue]];
    case 130: 
      return [RewardedImpression fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface YandexAdsRewardedCodecWriter : FlutterStandardWriter
@end
@implementation YandexAdsRewardedCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[RewardedError class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RewardedEvent class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RewardedImpression class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface YandexAdsRewardedCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YandexAdsRewardedCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YandexAdsRewardedCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YandexAdsRewardedCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YandexAdsRewardedGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    YandexAdsRewardedCodecReaderWriter *readerWriter = [[YandexAdsRewardedCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void YandexAdsRewardedSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YandexAdsRewarded> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.make"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(makeId:error:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(makeId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api makeId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.load"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadId:error:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(loadId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api loadId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.show"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showId:error:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(showId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api showId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onAdLoaded"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onAdLoadedId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onAdLoadedId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onAdLoadedId:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onAdFailedToLoad"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onAdFailedToLoadId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onAdFailedToLoadId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onAdFailedToLoadId:arg_id completion:^(RewardedError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onAdFailedToShow"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onAdFailedToShowId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onAdFailedToShowId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onAdFailedToShowId:arg_id completion:^(RewardedError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onAdShown"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onAdShownId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onAdShownId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onAdShownId:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onAdDismissed"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onAdDismissedId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onAdDismissedId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onAdDismissedId:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onAdClicked"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onAdClickedId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onAdClickedId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onAdClickedId:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onImpression"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onImpressionId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onImpressionId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onImpressionId:arg_id completion:^(RewardedImpression *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.onRewarded"
        binaryMessenger:binaryMessenger
        codec:YandexAdsRewardedGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onRewardedId:completion:)], @"YandexAdsRewarded api (%@) doesn't respond to @selector(onRewardedId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api onRewardedId:arg_id completion:^(RewardedEvent *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
