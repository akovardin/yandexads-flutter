// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct RewardedError {
  var code: Int64
  var description: String

  static func fromList(_ list: [Any?]) -> RewardedError? {
    let code = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let description = list[1] as! String

    return RewardedError(
      code: code,
      description: description
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      description,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RewardedImpression {
  var data: String

  static func fromList(_ list: [Any?]) -> RewardedImpression? {
    let data = list[0] as! String

    return RewardedImpression(
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      data
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RewardedEvent {
  var amount: Int64
  var type: String

  static func fromList(_ list: [Any?]) -> RewardedEvent? {
    let amount = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let type = list[1] as! String

    return RewardedEvent(
      amount: amount,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      amount,
      type,
    ]
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol YandexAdsRewarded {
  func make(id: String) throws
  func load(id: String) throws
  func show(id: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class YandexAdsRewardedSetup {
  /// The codec used by YandexAdsRewarded.
  /// Sets up an instance of `YandexAdsRewarded` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: YandexAdsRewarded?) {
    let makeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.make", binaryMessenger: binaryMessenger)
    if let api = api {
      makeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.make(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      makeChannel.setMessageHandler(nil)
    }
    let loadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.load", binaryMessenger: binaryMessenger)
    if let api = api {
      loadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.load(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loadChannel.setMessageHandler(nil)
    }
    let showChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsRewarded.show", binaryMessenger: binaryMessenger)
    if let api = api {
      showChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.show(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showChannel.setMessageHandler(nil)
    }
  }
}
private class FlutterYandexAdsRewardedCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return RewardedError.fromList(self.readValue() as! [Any?])
    case 129:
      return RewardedEvent.fromList(self.readValue() as! [Any?])
    case 130:
      return RewardedImpression.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterYandexAdsRewardedCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RewardedError {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? RewardedEvent {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? RewardedImpression {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterYandexAdsRewardedCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterYandexAdsRewardedCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterYandexAdsRewardedCodecWriter(data: data)
  }
}

class FlutterYandexAdsRewardedCodec: FlutterStandardMessageCodec {
  static let shared = FlutterYandexAdsRewardedCodec(readerWriter: FlutterYandexAdsRewardedCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterYandexAdsRewardedProtocol {
  func onAdLoaded(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onAdFailedToLoad(id idArg: String, err errArg: RewardedError, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onAdFailedToShow(id idArg: String, err errArg: RewardedError, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onAdShown(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onAdDismissed(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onAdClicked(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onImpression(id idArg: String, data dataArg: RewardedImpression, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRewarded(id idArg: String, reward rewardArg: RewardedEvent, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class FlutterYandexAdsRewarded: FlutterYandexAdsRewardedProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterYandexAdsRewardedCodec.shared
  }
  func onAdLoaded(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onAdLoaded"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAdFailedToLoad(id idArg: String, err errArg: RewardedError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onAdFailedToLoad"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, errArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAdFailedToShow(id idArg: String, err errArg: RewardedError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onAdFailedToShow"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, errArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAdShown(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onAdShown"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAdDismissed(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onAdDismissed"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAdClicked(id idArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onAdClicked"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onImpression(id idArg: String, data dataArg: RewardedImpression, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onImpression"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRewarded(id idArg: String, reward rewardArg: RewardedEvent, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsRewarded.onRewarded"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, rewardArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
