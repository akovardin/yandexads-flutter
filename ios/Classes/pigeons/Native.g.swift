// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeError {
  var code: Int64
  var description: String

  static func fromList(_ list: [Any?]) -> NativeError? {
    let code = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let description = list[1] as! String

    return NativeError(
      code: code,
      description: description
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      description,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeImpression {
  var data: String

  static func fromList(_ list: [Any?]) -> NativeImpression? {
    let data = list[0] as! String

    return NativeImpression(
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      data,
    ]
  }
}

private class YandexAdsNativeCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return NativeError.fromList(self.readValue() as! [Any?])
      case 129:
        return NativeImpression.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class YandexAdsNativeCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeError {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeImpression {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class YandexAdsNativeCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return YandexAdsNativeCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return YandexAdsNativeCodecWriter(data: data)
  }
}

class YandexAdsNativeCodec: FlutterStandardMessageCodec {
  static let shared = YandexAdsNativeCodec(readerWriter: YandexAdsNativeCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol YandexAdsNative {
  func make(id: String) throws
  func load(id: String, width: Int64, height: Int64) throws
  func onAdLoaded(id: String, completion: @escaping (Result<Void, Error>) -> Void)
  func onAdFailedToLoad(id: String, completion: @escaping (Result<NativeError, Error>) -> Void)
  func onAdClicked(id: String, completion: @escaping (Result<Void, Error>) -> Void)
  func onLeftApplication(id: String, completion: @escaping (Result<Void, Error>) -> Void)
  func onReturnedToApplication(id: String, completion: @escaping (Result<Void, Error>) -> Void)
  func onImpression(id: String, completion: @escaping (Result<NativeImpression, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class YandexAdsNativeSetup {
  /// The codec used by YandexAdsNative.
  static var codec: FlutterStandardMessageCodec { YandexAdsNativeCodec.shared }
  /// Sets up an instance of `YandexAdsNative` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: YandexAdsNative?) {
    let makeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.make", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      makeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.make(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      makeChannel.setMessageHandler(nil)
    }
    let loadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.load", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let widthArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let heightArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        do {
          try api.load(id: idArg, width: widthArg, height: heightArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loadChannel.setMessageHandler(nil)
    }
    let onAdLoadedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.onAdLoaded", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onAdLoadedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.onAdLoaded(id: idArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      onAdLoadedChannel.setMessageHandler(nil)
    }
    let onAdFailedToLoadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.onAdFailedToLoad", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onAdFailedToLoadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.onAdFailedToLoad(id: idArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      onAdFailedToLoadChannel.setMessageHandler(nil)
    }
    let onAdClickedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.onAdClicked", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onAdClickedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.onAdClicked(id: idArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      onAdClickedChannel.setMessageHandler(nil)
    }
    let onLeftApplicationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.onLeftApplication", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onLeftApplicationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.onLeftApplication(id: idArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      onLeftApplicationChannel.setMessageHandler(nil)
    }
    let onReturnedToApplicationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.onReturnedToApplication", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onReturnedToApplicationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.onReturnedToApplication(id: idArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      onReturnedToApplicationChannel.setMessageHandler(nil)
    }
    let onImpressionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsNative.onImpression", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onImpressionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.onImpression(id: idArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      onImpressionChannel.setMessageHandler(nil)
    }
  }
}
