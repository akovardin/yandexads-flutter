// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.kovardin.flutter_yandex_ads.pigeons.appopen

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class AppOpenError (
  val code: Long,
  val description: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AppOpenError {
      val code = list[0].let { if (it is Int) it.toLong() else it as Long }
      val description = list[1] as String
      return AppOpenError(code, description)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      description,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AppOpenImpression (
  val data: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AppOpenImpression {
      val data = list[0] as String
      return AppOpenImpression(data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      data,
    )
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface YandexAdsAppOpen {
  fun make(id: String)

  companion object {
    /** The codec used by YandexAdsAppOpen. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `YandexAdsAppOpen` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: YandexAdsAppOpen?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_yandex_ads.YandexAdsAppOpen.make", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.make(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object FlutterYandexAdsAppOpenCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppOpenError.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppOpenImpression.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AppOpenError -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is AppOpenImpression -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class FlutterYandexAdsAppOpen(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by FlutterYandexAdsAppOpen. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterYandexAdsAppOpenCodec
    }
  }
  fun onAdLoaded(idArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdLoaded"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onAdFailedToLoad(idArg: String, errArg: AppOpenError, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToLoad"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg, errArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onAdFailedToShow(idArg: String, errArg: AppOpenError, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToShow"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg, errArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onAdShown(idArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdShown"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onAdDismissed(idArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdDismissed"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onAdClicked(idArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdClicked"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onImpression(idArg: String, dataArg: AppOpenImpression, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onImpression"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg, dataArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
