// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class AppOpenError {
  AppOpenError({
    required this.code,
    required this.description,
  });

  int code;

  String description;

  Object encode() {
    return <Object?>[
      code,
      description,
    ];
  }

  static AppOpenError decode(Object result) {
    result as List<Object?>;
    return AppOpenError(
      code: result[0]! as int,
      description: result[1]! as String,
    );
  }
}

class AppOpenImpression {
  AppOpenImpression({
    required this.data,
  });

  String data;

  Object encode() {
    return <Object?>[
      data,
    ];
  }

  static AppOpenImpression decode(Object result) {
    result as List<Object?>;
    return AppOpenImpression(
      data: result[0]! as String,
    );
  }
}

class YandexAdsAppOpen {
  /// Constructor for [YandexAdsAppOpen].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  YandexAdsAppOpen({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<void> make(String id) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_yandex_ads.YandexAdsAppOpen.make';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[id]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterYandexAdsAppOpenCodec extends StandardMessageCodec {
  const _FlutterYandexAdsAppOpenCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppOpenError) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AppOpenImpression) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AppOpenError.decode(readValue(buffer)!);
      case 129: 
        return AppOpenImpression.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterYandexAdsAppOpen {
  static const MessageCodec<Object?> pigeonChannelCodec = _FlutterYandexAdsAppOpenCodec();

  void onAdLoaded(String id);

  void onAdFailedToLoad(String id, AppOpenError err);

  void onAdFailedToShow(String id, AppOpenError err);

  void onAdShown(String id);

  void onAdDismissed(String id);

  void onAdClicked(String id);

  void onImpression(String id, AppOpenImpression data);

  static void setup(FlutterYandexAdsAppOpen? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdLoaded', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdLoaded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdLoaded was null, expected non-null String.');
          try {
            api.onAdLoaded(arg_id!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToLoad', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToLoad was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToLoad was null, expected non-null String.');
          final AppOpenError? arg_err = (args[1] as AppOpenError?);
          assert(arg_err != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToLoad was null, expected non-null AppOpenError.');
          try {
            api.onAdFailedToLoad(arg_id!, arg_err!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToShow', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToShow was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToShow was null, expected non-null String.');
          final AppOpenError? arg_err = (args[1] as AppOpenError?);
          assert(arg_err != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdFailedToShow was null, expected non-null AppOpenError.');
          try {
            api.onAdFailedToShow(arg_id!, arg_err!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdShown', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdShown was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdShown was null, expected non-null String.');
          try {
            api.onAdShown(arg_id!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdDismissed', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdDismissed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdDismissed was null, expected non-null String.');
          try {
            api.onAdDismissed(arg_id!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdClicked', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdClicked was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onAdClicked was null, expected non-null String.');
          try {
            api.onAdClicked(arg_id!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onImpression', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onImpression was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onImpression was null, expected non-null String.');
          final AppOpenImpression? arg_data = (args[1] as AppOpenImpression?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.flutter_yandex_ads.FlutterYandexAdsAppOpen.onImpression was null, expected non-null AppOpenImpression.');
          try {
            api.onImpression(arg_id!, arg_data!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
